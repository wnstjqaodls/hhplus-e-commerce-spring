version: '3'
services:
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=application
      - MYSQL_PASSWORD=application
      - MYSQL_DATABASE=hhplus
    volumes:
      - ./data/mysql/:/var/lib/mysql
  redis:
    image: redis:7.4.4-alpine
    container_name: redis
    ports:
      - "6379:6379"
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper-7
    ports:
      - "2181:2181"
    environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka-7
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

    depends_on:
      - zookeeper

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center-7
    ports:
      - "9021:9021"
    environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
        CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
        PORT: 9021
    depends_on:
      - kafka
      - zookeeper

  k6:
    image: grafana/k6:0.54.0
    container_name: k6
    volumes:
      - ./k6:/scripts:ro
      - ./data/k6-results:/results
    networks:
      - default
    depends_on:
      - mysql
      - redis
      - kafka
    profiles:
      - testing

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./data/prometheus:/prometheus
    command: |
      sh -c "
      cat > /tmp/prometheus.yml << 'EOF'
      global:
        scrape_interval: 15s
        evaluation_interval: 15s

      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

        - job_name: 'spring-boot-app'
          static_configs:
            - targets: ['host.docker.internal:8080']
          metrics_path: '/actuator/prometheus'
          scrape_interval: 5s
      EOF
      /bin/prometheus --config.file=/tmp/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/etc/prometheus/console_libraries --web.console.templates=/etc/prometheus/consoles --storage.tsdb.retention.time=200h --web.enable-lifecycle
      "
    networks:
      - default
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./data/grafana:/var/lib/grafana
    command: |
      sh -c "
      mkdir -p /etc/grafana/provisioning/datasources
      cat > /etc/grafana/provisioning/datasources/prometheus.yml << 'EOF'
      apiVersion: 1

      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus:9090
          isDefault: true
      EOF
      /run.sh
      "
    networks:
      - default
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  default:
    driver: bridge
